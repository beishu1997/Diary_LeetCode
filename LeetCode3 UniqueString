#--------------------------------------------------------------------------------
#对于sliding window 的另一种理解：即你可以有两个东西在走路，但是只要每个东西遍历过程都是n就好，这样O(2N)=O(N)  没啥问题
#所以对于这题，一开始的想法其实是对的
#想法为：从头开始，left and right，遍历到某个重复单元，记录下长度（right-left），left定位到重复单元的前一个位置上，继续走。这样就是2N
# 但是有很多细节要去考虑：
# 关于left , right的设置： 需要再考虑。
#过两天在添加一下吧 新的算法
#-------------------------------------------------------------------------------
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s)<=1:
            return len(s)
        left=0
        right=0
        count=[0]
        count2=[]
        dict_alpha={}
        while(True):
            if right>=len(s):
                count2.append(right)
                break
            if s[right] not in dict_alpha:
                dict_alpha[s[right]]=right
                right+=1
            else:
                count2.append(right)
                right=dict_alpha[s[right]]+1
                dict_alpha={}
                count.append(right)
        a=list(zip(count2,count))
        return max([i[0]-i[1] for i in a])




                    
            
        
            

            
            
            
            
        
        
        
